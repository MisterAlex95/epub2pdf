#!/usr/bin/env python3
"""
Interface graphique unifi√©e pour epub2pdf, cbr2pdf et cbz2pdf
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
import json
from pathlib import Path
from core.config import VERSION, FILE_FORMATS, COLORS
from core.conversion_manager import ConversionManager
from core.settings_manager import SettingsManager
from gui.ui_components import UIComponents


class UnifiedGUI:
    """Interface unifi√©e pour la conversion de fichiers"""
    
    def __init__(self, root):
        """Initialise l'interface unifi√©e"""
        print("üèóÔ∏è Initialisation de l'interface unifi√©e...")
        self.root = root
        print("üìê Configuration de la fen√™tre...")
        UIComponents.setup_window(root, f"epub2pdf, cbr2pdf & cbz2pdf - Unified Converter v{VERSION}")
        print("üé® Configuration du th√®me...")
        UIComponents.setup_theme()
        
        # Initialisation des gestionnaires
        print("‚öôÔ∏è Initialisation du gestionnaire de param√®tres...")
        self.settings_manager = SettingsManager()
        
        # Initialisation des variables
        print("üìù Initialisation des variables...")
        self._init_variables()
        
        # Cr√©ation des composants UI
        print("üîß Cr√©ation des composants UI...")
        self._init_ui_components()
        
        # Chargement des param√®tres
        print("üíæ Chargement des param√®tres...")
        self._load_settings()
        
        # Configuration des √©v√©nements
        self._setup_events()
        
        # Configuration des √©v√©nements de fen√™tre
        self._setup_window_events()
        
        # Affichage du message initial
        self._show_initial_message()
        
        print("‚úÖ Interface unifi√©e initialis√©e avec succ√®s")
        
        # Variables pour les fichiers
        self.all_files = []
        self.files_by_format = {'epub': [], 'cbr': [], 'cbz': []}
        
    def _init_variables(self):
        """Initialise les variables de l'interface"""
        # Variables de r√©pertoires
        self.input_dir = tk.StringVar()
        self.output_dir = tk.StringVar()
        
        # Variables d'options
        self.recursive = tk.BooleanVar(value=False)
        self.force = tk.BooleanVar(value=False)
        self.grayscale = tk.BooleanVar(value=False)
        self.zip_output = tk.BooleanVar(value=False)
        self.clean_tmp = tk.BooleanVar(value=True)
        self.open_output = tk.BooleanVar(value=False)
        self.parallel = tk.BooleanVar(value=True)
        self.verbose = tk.BooleanVar(value=True)
        self.max_workers = tk.IntVar(value=2)
        
        # Variables de redimensionnement
        self.resize_var = tk.StringVar(value="")
        self.custom_resize_var = tk.StringVar(value="")
        
        # Variables de m√©tadonn√©es
        self.edit_metadata = tk.BooleanVar(value=True)
        self.auto_rename = tk.BooleanVar(value=True)
        # Champs personnalis√©s pour les m√©tadonn√©es
        self.custom_title = tk.StringVar()
        self.custom_author = tk.StringVar()
        self.custom_subject = tk.StringVar()
        self.custom_keywords = tk.StringVar()
        
        # Variables d'√©tat
        self.is_converting = False
        self.should_stop = False
        self.status_var = tk.StringVar()
        self.status_icon = None
        
    def _init_ui_components(self):
        """Initialise les composants de l'interface"""
        # Header
        self.header = UIComponents.create_header_frame(self.root)
        
        # Main content frame
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Directory frame
        self.dir_frame = UIComponents.create_directory_frame(
            self.main_frame,
            self.input_dir,
            self.output_dir,
            self.browse_input,
            self.browse_output,
            self.scan_all_files
        )
        
        # Options frame
        self.options_frame, self.resize_combo, self.custom_resize_entry = UIComponents.create_options_frame(
            self.main_frame,
            {
                'recursive': self.recursive,
                'force': self.force,
                'grayscale': self.grayscale,
                'zip_output': self.zip_output,
                'clean_tmp': self.clean_tmp,
                'open_output': self.open_output,
                'parallel': self.parallel,
                'verbose': self.verbose,
                'max_workers': self.max_workers,
                'resize': self.resize_var,
                'custom_resize': self.custom_resize_var,
                'edit_metadata': self.edit_metadata,
                'auto_rename': self.auto_rename,
                'custom_title': self.custom_title,
                'custom_author': self.custom_author,
                'custom_subject': self.custom_subject,
                'custom_keywords': self.custom_keywords
            }
        )
        
        # Conversion frame (remplace les onglets)
        self._create_conversion_frame()
        
        # Status bar
        self.status_icon, self.status_var, self.status_bar = UIComponents.create_status_bar(self.main_frame)
        
        # Menu
        self.menubar = UIComponents.create_menu(
            self.root,
            self.browse_input,
            self.browse_output,
            self.scan_all_files,
            self.convert_all,
            self.dry_run,
            self.show_about,
            self.root.quit
        )
        
    def _load_settings(self):
        """Charge les param√®tres sauvegard√©s"""
        try:
            settings = self.settings_manager.load_settings()
            
            # Restaurer les chemins
            if settings.get('input_path'):
                self.input_dir.set(settings['input_path'])
            if settings.get('output_path'):
                self.output_dir.set(settings['output_path'])
                
            # Restaurer les options de m√©tadonn√©es
            self.edit_metadata.set(settings.get('edit_metadata', False))
            self.auto_rename.set(settings.get('auto_rename', False))
            
            # Restaurer les champs personnalis√©s
            self.custom_title.set(settings.get('custom_title', ''))
            self.custom_author.set(settings.get('custom_author', ''))
            self.custom_subject.set(settings.get('custom_subject', ''))
            self.custom_keywords.set(settings.get('custom_keywords', ''))
            
            # Restaurer la taille de la fen√™tre
            window_width = settings.get('window_width', 800)
            window_height = settings.get('window_height', 600)
            self.root.geometry(f"{window_width}x{window_height}")
            
            print("üìù Param√®tres charg√©s avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement des param√®tres: {e}")
            
    def _save_settings(self):
        """Sauvegarde les param√®tres actuels"""
        try:
            settings = {
                'input_path': self.input_dir.get(),
                'output_path': self.output_dir.get(),
                'edit_metadata': self.edit_metadata.get(),
                'auto_rename': self.auto_rename.get(),
                'custom_title': self.custom_title.get(),
                'custom_author': self.custom_author.get(),
                'custom_subject': self.custom_subject.get(),
                'custom_keywords': self.custom_keywords.get(),
                'window_width': self.root.winfo_width(),
                'window_height': self.root.winfo_height()
            }
            
            self.settings_manager.save_settings(settings)
            print("üíæ Param√®tres sauvegard√©s avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde des param√®tres: {e}")
            
    def _setup_window_events(self):
        """Configure les √©v√©nements de la fen√™tre"""
        # Sauvegarder les param√®tres quand la fen√™tre est ferm√©e
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
        
        # Sauvegarder la taille quand elle change
        self.root.bind('<Configure>', self._on_window_resize)
        
    def _on_window_resize(self, event):
        """Appel√© quand la taille de la fen√™tre change"""
        # √âviter les appels multiples en v√©rifiant que c'est bien la fen√™tre principale
        if event.widget == self.root:
            # Annuler le timer pr√©c√©dent s'il existe
            if hasattr(self, '_resize_timer'):
                self.root.after_cancel(self._resize_timer)
            
            # Programmer une nouvelle sauvegarde apr√®s 2 secondes
            self._resize_timer = self.root.after(2000, self._save_settings)
            
    def _on_closing(self):
        """Appel√© quand la fen√™tre est ferm√©e"""
        self._save_settings()
        self.root.destroy()
        
    def _show_initial_message(self):
        """Affiche le message initial"""
        self.update_status("Ready - Select input directory and scan for files", "‚úÖ")
        
    def browse_input(self):
        """Ouvre le dialogue pour s√©lectionner le r√©pertoire d'entr√©e"""
        # Utiliser le dernier chemin sauvegard√© ou le r√©pertoire courant
        initial_dir = self.input_dir.get() if self.input_dir.get() else str(Path.cwd())
        directory = filedialog.askdirectory(
            title="Select Input Directory",
            initialdir=initial_dir
        )
        if directory:
            self.input_dir.set(directory)
            self.scan_all_files()
            
    def browse_output(self):
        """Ouvre le dialogue pour s√©lectionner le r√©pertoire de sortie"""
        # Utiliser le dernier chemin sauvegard√© ou le r√©pertoire courant
        initial_dir = self.output_dir.get() if self.output_dir.get() else str(Path.cwd())
        directory = filedialog.askdirectory(
            title="Select Output Directory",
            initialdir=initial_dir
        )
        if directory:
            self.output_dir.set(directory)
            
    def on_resize_change(self, event):
        """G√®re le changement de taille d'image"""
        resize_value = self.resize_var.get()
        if resize_value == "Custom":
            self.custom_resize_entry.grid()
        else:
            self.custom_resize_entry.grid_remove()
            
    def _setup_events(self):
        """Configure les √©v√©nements de l'interface"""
        # Lier le changement de resize √† la fonction
        self.resize_combo.bind('<<ComboboxSelected>>', self.on_resize_change)
        
        # Configuration de la fermeture propre
        self.root.protocol("WM_DELETE_WINDOW", self.root.quit)
        
    def show_about(self):
        """Affiche la bo√Æte de dialogue √Ä propos"""
        about_text = f"""
üìò epub2pdf, cbr2pdf & cbz2pdf - Unified Converter

Version: {VERSION}
Author: {AUTHOR}

Description: {DESCRIPTION}

Features:
‚Ä¢ Convert EPUB, CBR, and CBZ files to PDF
‚Ä¢ Parallel processing for faster conversion
‚Ä¢ Multiple output options (grayscale, resize, etc.)
‚Ä¢ Clean and modern interface

Keyboard Shortcuts:
‚Ä¢ Ctrl+O: Browse input directory
‚Ä¢ Ctrl+S: Browse output directory
‚Ä¢ Ctrl+F: Scan for files
‚Ä¢ Ctrl+R: Convert all files
‚Ä¢ Ctrl+D: Dry run
‚Ä¢ Ctrl+Q: Exit
‚Ä¢ F1: About
        """
        messagebox.showinfo("About", about_text.strip())
        
    def on_closing(self):
        """G√®re la fermeture de l'application"""
        self._save_settings()
        self.root.quit()

    def clear_all(self):
        """Vide tous les fichiers et r√©initialise l'interface"""
        self.all_files = []
        self.files_by_format = {'epub': [], 'cbr': [], 'cbz': []}
        self.update_file_count(0)
        self.reset_progress()
        self.update_conversion_status("Ready", "‚úÖ")
        self.log_message("üóëÔ∏è Tous les fichiers ont √©t√© supprim√©s")
        self.update_status("Interface r√©initialis√©e", "üîÑ")
        
    def log_message(self, message):
        """Ajoute un message au log (console seulement)"""
        # Log uniquement dans la console, pas dans l'interface
        print(f"üìù {message}")
        
    def update_status(self, message, icon="‚úÖ"):
        """Met √† jour le statut de l'interface"""
        self.status_icon.config(text=icon)
        self.status_var.set(message)
        self.root.update_idletasks()
        
    def get_conversion_options(self):
        """R√©cup√®re les options de conversion actuelles"""
        resize_option = self.resize_var.get()
        if resize_option == "Custom":
            resize_option = self.custom_resize_var.get()
        return {
            'output_dir': self.output_dir.get(),
            'recursive': self.recursive.get(),
            'force': self.force.get(),
            'grayscale': self.grayscale.get(),
            'resize': resize_option,
            'zip_output': self.zip_output.get(),
            'clean_tmp': self.clean_tmp.get(),
            'open_output': self.open_output.get(),
            'parallel': self.parallel.get(),
            'max_workers': self.max_workers.get(),
            'verbose': self.verbose.get(),
            'edit_metadata': self.edit_metadata.get(),
            'auto_rename': self.auto_rename.get(),
            'custom_title': self.custom_title.get(),
            'custom_author': self.custom_author.get(),
            'custom_subject': self.custom_subject.get(),
            'custom_keywords': self.custom_keywords.get()
        }
        
    def scan_all_files(self):
        """Scanne automatiquement tous les formats de fichiers dans le r√©pertoire d'entr√©e"""
        if not self.input_dir.get():
            messagebox.showerror("Error", "Please select an input directory")
            return
            
        self.update_status("Scanning for files...", "üîç")
        self.update_conversion_status("Scanning for files...", "üîç")
        
        try:
            total_files = 0
            self.files_by_format = {'epub': [], 'cbr': [], 'cbz': []}
            
            input_path = Path(self.input_dir.get())
            
            # Scanner automatiquement pour tous les formats support√©s
            supported_formats = ['epub', 'cbr', 'cbz']
            
            for format_key in supported_formats:
                if self.recursive.get():
                    pattern = f"**/*.{format_key}"
                else:
                    pattern = f"*.{format_key}"
                    
                for file_path in input_path.glob(pattern):
                    if file_path.is_file():
                        self.files_by_format[format_key].append(str(file_path))
                        total_files += 1
                        self.log_message(f"üìÅ Found {format_key.upper()}: {file_path.name}")
            
            # Mettre √† jour l'interface
            self.all_files = []
            format_summary = []
            
            for format_key, files in self.files_by_format.items():
                if files:
                    format_summary.append(f"{len(files)} {format_key.upper()}")
                for file_path in files:
                    self.all_files.append((file_path, format_key))
            
            if total_files == 0:
                self.update_status("No files found", "‚ö†Ô∏è")
                self.update_conversion_status("No files found", "‚ö†Ô∏è")
                messagebox.showinfo("No Files", "No supported files (EPUB, CBR, CBZ) found in the selected directory. Try enabling 'Search subdirectories' or check the file extensions.")
            else:
                summary_text = f"Found {total_files} files: {', '.join(format_summary)}"
                self.update_status(summary_text, "‚úÖ")
                self.update_conversion_status(f"Found {total_files} files", "‚úÖ")
                self.update_file_count(total_files)
                self.log_message(f"üìä {summary_text}")
                
        except Exception as e:
            self.log_message(f"‚ùå Error scanning files: {e}")
            self.update_status("Error scanning files", "‚ùå")
            
    def stop_conversion(self):
        """Arr√™te la conversion en cours"""
        self.should_stop = True
        self.is_converting = False
        self.stop_button.config(state=tk.DISABLED)
        self.convert_button.config(state=tk.NORMAL)
        self.update_conversion_status("Conversion stopped by user", "‚èπÔ∏è")
        self.log_message("‚èπÔ∏è Conversion stopped by user")
    
    def convert_all(self):
        """Convertit tous les fichiers d√©tect√©s"""
        if not self.all_files:
            messagebox.showwarning("No Files", "No files to convert. Please scan for files first.")
            return
        
        self.should_stop = False
        self.is_converting = True
        self.convert_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        
        # Lancer la conversion dans un thread s√©par√©
        import threading
        conversion_thread = threading.Thread(target=self._run_conversion)
        conversion_thread.daemon = True
        conversion_thread.start()
    
    def _run_conversion(self):
        """Ex√©cute la conversion dans un thread s√©par√©"""
        try:
            options = self.get_conversion_options()
            total_files = len(self.all_files)
            successful = 0
            failed = 0
            
            self.update_conversion_status("Starting conversion...", "üîÑ")
            self.reset_progress()
            
            for i, (file_path, format_type) in enumerate(self.all_files):
                if self.should_stop:
                    break
                
                # Mettre √† jour la progression
                progress = i + 1
                self.update_progress(progress, total_files, successful, failed)
                
                # Passer l'index i pour l'incr√©mentation
                if ConversionManager.convert_single_file(file_path, format_type, options, index=i):
                    successful += 1
                    self.log_message(f"‚úÖ Successfully converted: {os.path.basename(file_path)}")
                else:
                    failed += 1
                    self.log_message(f"‚ùå Failed to convert: {os.path.basename(file_path)}")
                
                # Mettre √† jour les statistiques
                stats_text = f"‚úÖ {successful} successful, ‚ùå {failed} failed"
                self.stats_label.config(text=stats_text)
            
            # Finaliser
            if self.should_stop:
                self.conversion_completed("Conversion stopped", "‚èπÔ∏è")
            else:
                self.conversion_completed(f"Conversion completed: {successful} successful, {failed} failed", "‚úÖ")
                
        except Exception as e:
            self.log_message(f"‚ùå Error during conversion: {e}")
            self.conversion_completed("Conversion error", "‚ùå")
        finally:
            self.is_converting = False
            self.should_stop = False
            
    def conversion_completed(self, message, icon="‚úÖ"):
        """Appel√© quand la conversion est termin√©e"""
        self.update_conversion_status(message, icon)
        
        # R√©activer les boutons
        self.convert_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        
        if "Conversion stopped" in message:
            self.log_message("‚èπÔ∏è Conversion stopped by user")
        elif "Conversion error" in message:
            self.log_message("‚ùå Conversion error")
        else:
            self.log_message(f"‚úÖ {message}")
        
        # Ouvrir le r√©pertoire de sortie si demand√©
        if self.open_output.get() and "successful" in message:
            try:
                import subprocess
                output_dir = self.output_dir.get() or "./pdfs"
                subprocess.run(["open", output_dir])
            except Exception as e:
                self.log_message(f"‚ùå Error opening output directory: {e}")
                
    def dry_run(self):
        """Simule la conversion sans la faire r√©ellement"""
        if not self.all_files:
            messagebox.showwarning("Warning", "No files to convert")
            return
            
        self.log_message(f"üß™ Simulation de conversion de {len(self.all_files)} fichiers...")
        self.update_status("Simulation en cours...", "üß™")
        self.update_conversion_status("Simulation en cours...", "üß™")
        
        # Simuler la conversion
        for file_path, format_key in self.all_files:
            self.log_message(f"üìã Simuler: {os.path.basename(file_path)} ({format_key.upper()})")
            
        self.log_message("‚úÖ Simulation termin√©e")
        self.update_status("Simulation termin√©e", "‚úÖ")
        self.update_conversion_status("Simulation termin√©e", "‚úÖ")
        messagebox.showinfo("Dry Run", f"Would convert {len(self.all_files)} files")

    def update_conversion_status(self, message, icon="‚úÖ"):
        """Met √† jour le statut de conversion"""
        self.conversion_status_label.config(text=f"{icon} {message}")
        
    def update_file_count(self, count):
        """Met √† jour le compteur de fichiers avec un r√©sum√© des formats"""
        if count == 0:
            self.file_count_label.config(text="üìÅ No files selected", foreground='gray')
        else:
            # Cr√©er un r√©sum√© des formats d√©tect√©s
            format_summary = []
            for format_key, files in self.files_by_format.items():
                if files:
                    format_summary.append(f"{len(files)} {format_key.upper()}")
            
            summary_text = f"{count} files: {', '.join(format_summary)}"
            self.file_count_label.config(text=summary_text, foreground=COLORS['success'])
            
    def reset_progress(self):
        """R√©initialise la barre de progression"""
        self.progress_bar['value'] = 0
        self.progress_label.config(text="0%")
        self.stats_label.config(text="")
        
    def update_progress(self, current, total, completed=0, failed=0):
        """Met √† jour la barre de progression avec des statistiques d√©taill√©es"""
        if total > 0:
            percentage = (current / total) * 100
            self.progress_bar['value'] = percentage
            self.progress_label.config(text=f"{percentage:.1f}%")
            
            # Mise √† jour des statistiques avec r√©partition par format
            stats_text = f"Progress: {current}/{total} files"
            if completed > 0 or failed > 0:
                stats_text += f" | ‚úÖ {completed} | ‚ùå {failed}"
                
                # Ajouter la r√©partition par format si des conversions ont eu lieu
                if completed > 0:
                    format_stats = []
                    for format_key, files in self.files_by_format.items():
                        if files:
                            format_stats.append(f"{format_key.upper()}: {len(files)}")
                    if format_stats:
                        stats_text += f" | Formats: {', '.join(format_stats)}"
                        
            self.stats_label.config(text=stats_text)

    def _create_conversion_frame(self):
        """Cr√©e le frame de conversion unifi√©"""
        self.conversion_frame = ttk.LabelFrame(self.main_frame, text="üîÑ Auto-Detection & Conversion", padding="8")
        self.conversion_frame.pack(fill=tk.X, pady=(0, 8))
        
        # Frame pour les informations de fichiers
        info_frame = ttk.Frame(self.conversion_frame)
        info_frame.pack(fill=tk.X, pady=(0, 8))
        
        # Label pour le nombre de fichiers
        self.file_count_label = ttk.Label(info_frame, text="üìÅ No files selected", font=("TkDefaultFont", 9))
        self.file_count_label.pack(anchor=tk.W)
        
        # Label pour le statut de conversion
        self.conversion_status_label = ttk.Label(info_frame, text="Ready to convert", font=("TkDefaultFont", 9))
        self.conversion_status_label.pack(anchor=tk.W)
        
        # Frame pour la barre de progression
        progress_frame = ttk.Frame(self.conversion_frame)
        progress_frame.pack(fill=tk.X, pady=(0, 8))
        
        # Barre de progression
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate', length=300)
        self.progress_bar.pack(fill=tk.X, pady=(0, 4))
        
        # Label de progression
        self.progress_label = ttk.Label(progress_frame, text="", font=("TkDefaultFont", 8))
        self.progress_label.pack(anchor=tk.W)
        
        # Label de statistiques
        self.stats_label = ttk.Label(progress_frame, text="", font=("TkDefaultFont", 8))
        self.stats_label.pack(anchor=tk.W)
        
        # Frame pour les boutons
        button_frame = ttk.Frame(self.conversion_frame)
        button_frame.pack(fill=tk.X, pady=(8, 0))
        
        # Bouton de conversion
        self.convert_button = ttk.Button(
            button_frame, 
            text="üîÑ Convert All Detected Files",
            command=self.convert_all,
            style="Accent.TButton"
        )
        self.convert_button.pack(side=tk.LEFT, padx=(0, 8))
        
        # Bouton Stop
        self.stop_button = ttk.Button(
            button_frame,
            text="‚èπÔ∏è Stop",
            command=self.stop_conversion,
            state=tk.DISABLED
        )
        self.stop_button.pack(side=tk.LEFT)


def main():
    """Point d'entr√©e principal de l'application"""
    print("üîç D√©marrage de l'application epub2pdf...")
    
    # V√©rifier que les scripts existent
    required_scripts = [
        "scripts/epub2pdf.sh",
        "scripts/cbr2pdf.sh",
        "scripts/cbz2pdf.sh"
    ]
    missing_scripts = []
    
    print("üìã V√©rification des scripts requis...")
    for script in required_scripts:
        if not os.path.exists(script):
            missing_scripts.append(script)
            print(f"‚ùå Script manquant: {script}")
        else:
            print(f"‚úÖ Script trouv√©: {script}")
            
    if missing_scripts:
        error_msg = f"Missing scripts: {', '.join(missing_scripts)}"
        print(f"‚ùå Erreur: {error_msg}")
        messagebox.showerror("Error", error_msg)
        return
        
    print("‚úÖ Tous les scripts sont pr√©sents")
    print("üöÄ Lancement de l'interface graphique...")
    
    # Cr√©er et lancer l'interface
    root = tk.Tk()
    app = UnifiedGUI(root)
    
    # Faire appara√Ætre la fen√™tre au premier plan
    root.lift()
    root.attributes('-topmost', True)
    root.after_idle(root.attributes, '-topmost', False)
    
    print("üé® Interface graphique initialis√©e")
    root.mainloop()


if __name__ == "__main__":
    main() 