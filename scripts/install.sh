#!/bin/bash

set -euo pipefail

echo "üì¶ Installing epub2pdf & cbr2pdf and their dependencies..."

# Check Homebrew
if ! command -v brew &>/dev/null; then
  echo "‚ùå Homebrew not found. Install it first:"
  echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
  echo "   Then run this script again."
  exit 1
fi

echo "üîç Checking dependencies..."

# Install Calibre (EPUB conversion)
if ! command -v ebook-convert &>/dev/null; then
  echo "üìö Installing Calibre..."
  brew install --cask calibre
else
  echo "‚úÖ Calibre already installed"
fi

# Install ImageMagick (image processing)
if ! command -v convert &>/dev/null; then
  echo "üñºÔ∏è Installing ImageMagick..."
  brew install imagemagick
else
  echo "‚úÖ ImageMagick already installed"
fi

# Install Ghostscript (PDF combination)
if ! command -v gs &>/dev/null; then
  echo "üìÑ Installing Ghostscript..."
  brew install ghostscript
else
  echo "‚úÖ Ghostscript already installed"
fi

# Install unar (CBR extraction)
if ! command -v unar &>/dev/null; then
  echo "üìö Installing unar..."
  brew install unar
else
  echo "‚úÖ unar already installed"
fi

# Install Python tkinter (GUI)
if ! python3 -c "import tkinter" 2>/dev/null; then
  echo "üñ•Ô∏è Installing Python tkinter..."
  brew install python-tk
else
  echo "‚úÖ Python tkinter already installed"
fi

# Check zip (archiving)
if ! command -v zip &>/dev/null; then
  echo "‚ö†Ô∏è zip not found (normally included in macOS)"
else
  echo "‚úÖ zip available"
fi

echo "‚úÖ All dependencies are installed."

# Create installation directories
echo "üìÅ Creating installation directories..."
mkdir -p "$HOME/.epub2pdf"
mkdir -p "$HOME/.cbr2pdf"

# Copy conversion scripts
echo "üìú Copying conversion scripts..."
if [ -f "$(dirname "$0")/epub2pdf.sh" ]; then
  cp "$(dirname "$0")/epub2pdf.sh" "$HOME/.epub2pdf/epub2pdf.sh"
  chmod +x "$HOME/.epub2pdf/epub2pdf.sh"
else
  echo "‚ùå epub2pdf.sh script not found in scripts directory"
  exit 1
fi

if [ -f "$(dirname "$0")/cbr2pdf.sh" ]; then
  cp "$(dirname "$0")/cbr2pdf.sh" "$HOME/.cbr2pdf/cbr2pdf.sh"
  chmod +x "$HOME/.cbr2pdf/cbr2pdf.sh"
else
  echo "‚ùå cbr2pdf.sh script not found in scripts directory"
  exit 1
fi

if [ -f "$(dirname "$0")/cbz2pdf.sh" ]; then
  cp "$(dirname "$0")/cbz2pdf.sh" "$HOME/.cbr2pdf/cbz2pdf.sh"
  chmod +x "$HOME/.cbr2pdf/cbz2pdf.sh"
else
  echo "‚ùå cbz2pdf.sh script not found in scripts directory"
  exit 1
fi

# Copy GUI files
echo "üñ•Ô∏è Copying GUI files..."
if [ -f "$(dirname "$0")/../main.py" ]; then
  cp "$(dirname "$0")/../main.py" "$HOME/.epub2pdf/main.py"
  chmod +x "$HOME/.epub2pdf/main.py"
else
  echo "‚ö†Ô∏è main.py not found, GUI will not be available"
fi

if [ -f "$(dirname "$0")/../run.py" ]; then
  cp "$(dirname "$0")/../run.py" "$HOME/.epub2pdf/run.py"
  chmod +x "$HOME/.epub2pdf/run.py"
else
  echo "‚ö†Ô∏è run.py not found, launcher will not be available"
fi

# Copy source code
echo "üìÅ Copying source code..."
if [ -d "$(dirname "$0")/../src" ]; then
  cp -r "$(dirname "$0")/../src" "$HOME/.epub2pdf/"
  echo "‚úÖ Source code copied"
else
  echo "‚ö†Ô∏è src directory not found"
fi

# Configure aliases
echo "üîó Configuring aliases..."
SHELL_RC="$HOME/.bash_profile"
[[ "$SHELL" =~ zsh ]] && SHELL_RC="$HOME/.zshrc"

# EPUB alias
if ! grep -q "alias epub2pdf=" "$SHELL_RC"; then
  echo "alias epub2pdf='$HOME/.epub2pdf/epub2pdf.sh'" >> "$SHELL_RC"
  echo "‚úÖ EPUB alias added to $SHELL_RC"
else
  echo "‚ÑπÔ∏è EPUB alias already present in $SHELL_RC"
fi

# EPUB GUI alias
if [ -f "$HOME/.epub2pdf/epub2pdf_gui.sh" ]; then
  if ! grep -q "alias epub2pdf-gui=" "$SHELL_RC"; then
    echo "alias epub2pdf-gui='$HOME/.epub2pdf/epub2pdf_gui.sh'" >> "$SHELL_RC"
    echo "‚úÖ EPUB GUI alias added to $SHELL_RC"
  else
    echo "‚ÑπÔ∏è EPUB GUI alias already present in $SHELL_RC"
  fi
fi

# CBR alias
if ! grep -q "alias cbr2pdf=" "$SHELL_RC"; then
  echo "alias cbr2pdf='$HOME/.cbr2pdf/cbr2pdf.sh'" >> "$SHELL_RC"
  echo "‚úÖ CBR alias added to $SHELL_RC"
else
  echo "‚ÑπÔ∏è CBR alias already present in $SHELL_RC"
fi

# CBR GUI alias
if [ -f "$HOME/.cbr2pdf/cbr2pdf_gui.sh" ]; then
  if ! grep -q "alias cbr2pdf-gui=" "$SHELL_RC"; then
    echo "alias cbr2pdf-gui='$HOME/.cbr2pdf/cbr2pdf_gui.sh'" >> "$SHELL_RC"
    echo "‚úÖ CBR GUI alias added to $SHELL_RC"
  else
    echo "‚ÑπÔ∏è CBR GUI alias already present in $SHELL_RC"
  fi
fi

# CBZ alias
if [ -f "$HOME/.epub2pdf/cbz2pdf.sh" ]; then
  if ! grep -q "alias cbz2pdf=" "$SHELL_RC"; then
    echo "alias cbz2pdf='$HOME/.epub2pdf/cbz2pdf.sh'" >> "$SHELL_RC"
    echo "‚úÖ CBZ alias added to $SHELL_RC"
  else
    echo "‚ÑπÔ∏è CBZ alias already present in $SHELL_RC"
  fi
fi

# Unified GUI alias
if [ -f "$HOME/.epub2pdf/unified_gui.sh" ]; then
  if ! grep -q "alias unified-gui=" "$SHELL_RC"; then
    echo "alias unified-gui='$HOME/.epub2pdf/unified_gui.sh'" >> "$SHELL_RC"
    echo "‚úÖ Unified GUI alias added to $SHELL_RC"
  else
    echo "‚ÑπÔ∏è Unified GUI alias already present in $SHELL_RC"
  fi
fi

echo ""
echo "üéâ Installation completed successfully!"
echo ""
echo "üìñ Usage:"
echo "   epub2pdf --help                    # Show EPUB help"
echo "   cbr2pdf --help                     # Show CBR help"
echo "   cbz2pdf --help                     # Show CBZ help"
echo "   epub2pdf-gui                       # Launch EPUB GUI"
echo "   cbr2pdf-gui                        # Launch CBR GUI"
echo "   unified-gui                        # Launch unified GUI"
echo ""
echo "üí° Examples:"
echo "   epub2pdf --input-dir ./mangas --output-dir ./pdfs --recursive"
echo "   cbr2pdf --input-dir ./comics --output-dir ./pdfs --verbose"
echo "   cbz2pdf --input-dir ./books --output-dir ./pdfs --grayscale"
echo ""
echo "üîß Features:"
echo "   ‚úÖ EPUB to PDF conversion optimized for manga"
echo "   ‚úÖ CBR to PDF conversion optimized for comics"
echo "   ‚úÖ CBZ to PDF conversion optimized for books"
echo "   ‚úÖ Batch processing with progress bar"
echo "   ‚úÖ Grayscale mode to save ink"
echo "   ‚úÖ Automatic ZIP archiving"
echo "   ‚úÖ Temporary file cleanup"
echo "   ‚úÖ Graphical user interfaces"
echo "   ‚úÖ Unified interface with file listing and parallel processing" 